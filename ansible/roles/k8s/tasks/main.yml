---
- name: Fail if neither k8s_is_master nor k8s_is_worker is set
  ansible.builtin.fail:
    msg: Neither k8s_is_master nor k8s_is_worker is set
  when:
    - k8s_is_master is undefined
    - k8s_is_worker is undefined

- name: Enable Kubernetes repo
  ansible.builtin.yum_repository:
    name: kubernetes
    description: Kubernetes
    file: kubernetes
    baseurl: "https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/"
    gpgcheck: true
    gpgkey: "https://pkgs.k8s.io/core:/stable:/{{ kubernetes_version }}/rpm/repodata/repomd.xml.key"
    enabled: true

- name: Enable CRI-O repo
  ansible.builtin.yum_repository:
    name: cri-o
    description: CRI-O
    file: cri-o
    baseurl: "https://pkgs.k8s.io/addons:/cri-o:/{{ k8s_crio_project_path }}/rpm/"
    gpgcheck: true
    gpgkey: "https://pkgs.k8s.io/addons:/cri-o:/{{ k8s_crio_project_path }}/rpm/repodata/repomd.xml.key"
    enabled: true

- name: Install container-selinux
  ansible.builtin.yum:
    name: container-selinux
    state: installed

- name: "Install cri-o, kubelet, kubeadm, kubectl, tc"
  ansible.builtin.yum:
    name:
      - cri-o
      - kubelet
      - kubeadm
      - kubectl
      - iproute-tc
    state: installed

- name: Start and enable cri-o and kubelet
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - crio
    - kubelet

# To prevent recreation of zram swap
- name: Uninstall zram-generator-defaults
  ansible.builtin.yum:
    name: zram-generator-defaults
    state: absent

- name: Disable swap
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    #- zramctl --reset /dev/zram0
    - swapoff -a

- name: Disable swap persistently
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: yes

- name: Open master node ports
  when: k8s_is_master
  ansible.posix.firewalld:
    port: "{{ item }}/tcp"
    permanent: true
    immediate: true
    state: enabled
  loop: # TODO: put some in internal zone?
    - 6443 # API server
    - 2379-2380 # etcd
    - 10250 # kubelet
    - 10259 # kube-scheduler
    - 10257 # kube-controller-manager


- name: Open worker node ports
  when: k8s_is_worker
  ansible.posix.firewalld:
    port: "{{ item }}/tcp"
    permanent: true
    immediate: true
    state: enabled
  loop:
    - 10250 # kubelet
    - 30000-32767 # nodeport

- name: Ensure kernel modules are loaded at boot
  ansible.builtin.copy:
    content: |
      br_netfilter
      overlay
    dest: /etc/modules-load.d/k8s.conf

- name: Enable kernel modules
  community.general.modprobe:
    name: "{{ item }}"
    state: present
      #persistent: present # TODO: Fix this. Says it's and unsupported param
  loop:
    - br_netfilter
    - overlay

- name: Ensure ipv4 forwarding is enabled
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: "1"
    state: present
    sysctl_set: true

- name: Let iptables see bridged traffic
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    sysctl_set: true
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables

- name: Ensure kernel params persist across reboots
  ansible.builtin.copy:
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    dest: /etc/sysctl.d/k8s.conf

# From official kubeadm installation docs:
# You can leave SELinux enabled if you know how to configure it,
# but it may require settings that are not supported by kubeadm.
- name: Set Selinux to permissive mode
  when: k8s_disable_selinux
  ansible.posix.selinux:
    policy: targeted
    state: permissive


